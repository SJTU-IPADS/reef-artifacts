// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: reef.proto

#include "reef.pb.h"
#include "reef.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace reef {
namespace rpc {

static const char* REEFService_method_names[] = {
  "/reef.rpc.REEFService/LoadModel",
  "/reef.rpc.REEFService/SetPriority",
  "/reef.rpc.REEFService/RegisterBlob",
  "/reef.rpc.REEFService/GetBlob",
  "/reef.rpc.REEFService/SetBlob",
  "/reef.rpc.REEFService/Infer",
};

std::unique_ptr< REEFService::Stub> REEFService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< REEFService::Stub> stub(new REEFService::Stub(channel, options));
  return stub;
}

REEFService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_LoadModel_(REEFService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPriority_(REEFService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterBlob_(REEFService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlob_(REEFService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBlob_(REEFService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Infer_(REEFService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status REEFService::Stub::LoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::reef::rpc::LoadModelReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::reef::rpc::LoadModelRequest, ::reef::rpc::LoadModelReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadModel_, context, request, response);
}

void REEFService::Stub::async::LoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest* request, ::reef::rpc::LoadModelReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::reef::rpc::LoadModelRequest, ::reef::rpc::LoadModelReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadModel_, context, request, response, std::move(f));
}

void REEFService::Stub::async::LoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest* request, ::reef::rpc::LoadModelReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::LoadModelReply>* REEFService::Stub::PrepareAsyncLoadModelRaw(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::reef::rpc::LoadModelReply, ::reef::rpc::LoadModelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadModel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::LoadModelReply>* REEFService::Stub::AsyncLoadModelRaw(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadModelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status REEFService::Stub::SetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::reef::rpc::SetPriorityReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::reef::rpc::SetPriorityRequest, ::reef::rpc::SetPriorityReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPriority_, context, request, response);
}

void REEFService::Stub::async::SetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest* request, ::reef::rpc::SetPriorityReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::reef::rpc::SetPriorityRequest, ::reef::rpc::SetPriorityReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPriority_, context, request, response, std::move(f));
}

void REEFService::Stub::async::SetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest* request, ::reef::rpc::SetPriorityReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPriority_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::SetPriorityReply>* REEFService::Stub::PrepareAsyncSetPriorityRaw(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::reef::rpc::SetPriorityReply, ::reef::rpc::SetPriorityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPriority_, context, request);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::SetPriorityReply>* REEFService::Stub::AsyncSetPriorityRaw(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPriorityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status REEFService::Stub::RegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::reef::rpc::RegisterBlobReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::reef::rpc::RegisterBlobRequest, ::reef::rpc::RegisterBlobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterBlob_, context, request, response);
}

void REEFService::Stub::async::RegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest* request, ::reef::rpc::RegisterBlobReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::reef::rpc::RegisterBlobRequest, ::reef::rpc::RegisterBlobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterBlob_, context, request, response, std::move(f));
}

void REEFService::Stub::async::RegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest* request, ::reef::rpc::RegisterBlobReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterBlob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::RegisterBlobReply>* REEFService::Stub::PrepareAsyncRegisterBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::reef::rpc::RegisterBlobReply, ::reef::rpc::RegisterBlobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterBlob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::RegisterBlobReply>* REEFService::Stub::AsyncRegisterBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterBlobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status REEFService::Stub::GetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::reef::rpc::GetBlobReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::reef::rpc::GetBlobRequest, ::reef::rpc::GetBlobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlob_, context, request, response);
}

void REEFService::Stub::async::GetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest* request, ::reef::rpc::GetBlobReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::reef::rpc::GetBlobRequest, ::reef::rpc::GetBlobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlob_, context, request, response, std::move(f));
}

void REEFService::Stub::async::GetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest* request, ::reef::rpc::GetBlobReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::GetBlobReply>* REEFService::Stub::PrepareAsyncGetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::reef::rpc::GetBlobReply, ::reef::rpc::GetBlobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::GetBlobReply>* REEFService::Stub::AsyncGetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status REEFService::Stub::SetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::reef::rpc::SetBlobReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::reef::rpc::SetBlobRequest, ::reef::rpc::SetBlobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBlob_, context, request, response);
}

void REEFService::Stub::async::SetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest* request, ::reef::rpc::SetBlobReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::reef::rpc::SetBlobRequest, ::reef::rpc::SetBlobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBlob_, context, request, response, std::move(f));
}

void REEFService::Stub::async::SetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest* request, ::reef::rpc::SetBlobReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBlob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::SetBlobReply>* REEFService::Stub::PrepareAsyncSetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::reef::rpc::SetBlobReply, ::reef::rpc::SetBlobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBlob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::SetBlobReply>* REEFService::Stub::AsyncSetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBlobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status REEFService::Stub::Infer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::reef::rpc::InferReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::reef::rpc::InferRequest, ::reef::rpc::InferReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Infer_, context, request, response);
}

void REEFService::Stub::async::Infer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest* request, ::reef::rpc::InferReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::reef::rpc::InferRequest, ::reef::rpc::InferReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Infer_, context, request, response, std::move(f));
}

void REEFService::Stub::async::Infer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest* request, ::reef::rpc::InferReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Infer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::InferReply>* REEFService::Stub::PrepareAsyncInferRaw(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::reef::rpc::InferReply, ::reef::rpc::InferRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Infer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::reef::rpc::InferReply>* REEFService::Stub::AsyncInferRaw(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInferRaw(context, request, cq);
  result->StartCall();
  return result;
}

REEFService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      REEFService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< REEFService::Service, ::reef::rpc::LoadModelRequest, ::reef::rpc::LoadModelReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](REEFService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::reef::rpc::LoadModelRequest* req,
             ::reef::rpc::LoadModelReply* resp) {
               return service->LoadModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      REEFService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< REEFService::Service, ::reef::rpc::SetPriorityRequest, ::reef::rpc::SetPriorityReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](REEFService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::reef::rpc::SetPriorityRequest* req,
             ::reef::rpc::SetPriorityReply* resp) {
               return service->SetPriority(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      REEFService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< REEFService::Service, ::reef::rpc::RegisterBlobRequest, ::reef::rpc::RegisterBlobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](REEFService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::reef::rpc::RegisterBlobRequest* req,
             ::reef::rpc::RegisterBlobReply* resp) {
               return service->RegisterBlob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      REEFService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< REEFService::Service, ::reef::rpc::GetBlobRequest, ::reef::rpc::GetBlobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](REEFService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::reef::rpc::GetBlobRequest* req,
             ::reef::rpc::GetBlobReply* resp) {
               return service->GetBlob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      REEFService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< REEFService::Service, ::reef::rpc::SetBlobRequest, ::reef::rpc::SetBlobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](REEFService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::reef::rpc::SetBlobRequest* req,
             ::reef::rpc::SetBlobReply* resp) {
               return service->SetBlob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      REEFService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< REEFService::Service, ::reef::rpc::InferRequest, ::reef::rpc::InferReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](REEFService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::reef::rpc::InferRequest* req,
             ::reef::rpc::InferReply* resp) {
               return service->Infer(ctx, req, resp);
             }, this)));
}

REEFService::Service::~Service() {
}

::grpc::Status REEFService::Service::LoadModel(::grpc::ServerContext* context, const ::reef::rpc::LoadModelRequest* request, ::reef::rpc::LoadModelReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status REEFService::Service::SetPriority(::grpc::ServerContext* context, const ::reef::rpc::SetPriorityRequest* request, ::reef::rpc::SetPriorityReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status REEFService::Service::RegisterBlob(::grpc::ServerContext* context, const ::reef::rpc::RegisterBlobRequest* request, ::reef::rpc::RegisterBlobReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status REEFService::Service::GetBlob(::grpc::ServerContext* context, const ::reef::rpc::GetBlobRequest* request, ::reef::rpc::GetBlobReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status REEFService::Service::SetBlob(::grpc::ServerContext* context, const ::reef::rpc::SetBlobRequest* request, ::reef::rpc::SetBlobReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status REEFService::Service::Infer(::grpc::ServerContext* context, const ::reef::rpc::InferRequest* request, ::reef::rpc::InferReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace reef
}  // namespace rpc


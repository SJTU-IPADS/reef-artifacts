// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reef.proto

#include "reef.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace reef {
namespace rpc {
constexpr LoadModelRequest::LoadModelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , qid_(0){}
struct LoadModelRequestDefaultTypeInternal {
  constexpr LoadModelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadModelRequestDefaultTypeInternal() {}
  union {
    LoadModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadModelRequestDefaultTypeInternal _LoadModelRequest_default_instance_;
constexpr LoadModelReply::LoadModelReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : succ_(false)
  , mid_(0){}
struct LoadModelReplyDefaultTypeInternal {
  constexpr LoadModelReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadModelReplyDefaultTypeInternal() {}
  union {
    LoadModelReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadModelReplyDefaultTypeInternal _LoadModelReply_default_instance_;
constexpr SetPriorityRequest::SetPriorityRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rt_(false){}
struct SetPriorityRequestDefaultTypeInternal {
  constexpr SetPriorityRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPriorityRequestDefaultTypeInternal() {}
  union {
    SetPriorityRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPriorityRequestDefaultTypeInternal _SetPriorityRequest_default_instance_;
constexpr SetPriorityReply::SetPriorityReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : succ_(false)
  , qid_(0){}
struct SetPriorityReplyDefaultTypeInternal {
  constexpr SetPriorityReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPriorityReplyDefaultTypeInternal() {}
  union {
    SetPriorityReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPriorityReplyDefaultTypeInternal _SetPriorityReply_default_instance_;
constexpr RegisterBlobRequest::RegisterBlobRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mid_(0){}
struct RegisterBlobRequestDefaultTypeInternal {
  constexpr RegisterBlobRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterBlobRequestDefaultTypeInternal() {}
  union {
    RegisterBlobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterBlobRequestDefaultTypeInternal _RegisterBlobRequest_default_instance_;
constexpr RegisterBlobReply::RegisterBlobReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(int64_t{0})
  , succ_(false){}
struct RegisterBlobReplyDefaultTypeInternal {
  constexpr RegisterBlobReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterBlobReplyDefaultTypeInternal() {}
  union {
    RegisterBlobReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterBlobReplyDefaultTypeInternal _RegisterBlobReply_default_instance_;
constexpr GetBlobRequest::GetBlobRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetBlobRequestDefaultTypeInternal {
  constexpr GetBlobRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlobRequestDefaultTypeInternal() {}
  union {
    GetBlobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlobRequestDefaultTypeInternal _GetBlobRequest_default_instance_;
constexpr GetBlobReply::GetBlobReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : succ_(false){}
struct GetBlobReplyDefaultTypeInternal {
  constexpr GetBlobReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlobReplyDefaultTypeInternal() {}
  union {
    GetBlobReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlobReplyDefaultTypeInternal _GetBlobReply_default_instance_;
constexpr SetBlobRequest::SetBlobRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetBlobRequestDefaultTypeInternal {
  constexpr SetBlobRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBlobRequestDefaultTypeInternal() {}
  union {
    SetBlobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBlobRequestDefaultTypeInternal _SetBlobRequest_default_instance_;
constexpr SetBlobReply::SetBlobReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : succ_(false){}
struct SetBlobReplyDefaultTypeInternal {
  constexpr SetBlobReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBlobReplyDefaultTypeInternal() {}
  union {
    SetBlobReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBlobReplyDefaultTypeInternal _SetBlobReply_default_instance_;
constexpr InferRequest::InferRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mid_(0)
  , async_(false){}
struct InferRequestDefaultTypeInternal {
  constexpr InferRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InferRequestDefaultTypeInternal() {}
  union {
    InferRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InferRequestDefaultTypeInternal _InferRequest_default_instance_;
constexpr InferReply::InferReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : succ_(false)
  , tid_(0){}
struct InferReplyDefaultTypeInternal {
  constexpr InferReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InferReplyDefaultTypeInternal() {}
  union {
    InferReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InferReplyDefaultTypeInternal _InferReply_default_instance_;
}  // namespace rpc
}  // namespace reef
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_reef_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_reef_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_reef_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_reef_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::LoadModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::LoadModelRequest, dir_),
  PROTOBUF_FIELD_OFFSET(::reef::rpc::LoadModelRequest, name_),
  PROTOBUF_FIELD_OFFSET(::reef::rpc::LoadModelRequest, qid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::LoadModelReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::LoadModelReply, succ_),
  PROTOBUF_FIELD_OFFSET(::reef::rpc::LoadModelReply, mid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::SetPriorityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::SetPriorityRequest, rt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::SetPriorityReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::SetPriorityReply, succ_),
  PROTOBUF_FIELD_OFFSET(::reef::rpc::SetPriorityReply, qid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::RegisterBlobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::RegisterBlobRequest, mid_),
  PROTOBUF_FIELD_OFFSET(::reef::rpc::RegisterBlobRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::RegisterBlobReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::RegisterBlobReply, succ_),
  PROTOBUF_FIELD_OFFSET(::reef::rpc::RegisterBlobReply, key_),
  PROTOBUF_FIELD_OFFSET(::reef::rpc::RegisterBlobReply, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::GetBlobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::GetBlobRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::GetBlobReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::GetBlobReply, succ_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::SetBlobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::SetBlobRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::SetBlobReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::SetBlobReply, succ_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::InferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::InferRequest, mid_),
  PROTOBUF_FIELD_OFFSET(::reef::rpc::InferRequest, async_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::InferReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reef::rpc::InferReply, succ_),
  PROTOBUF_FIELD_OFFSET(::reef::rpc::InferReply, tid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::reef::rpc::LoadModelRequest)},
  { 9, -1, -1, sizeof(::reef::rpc::LoadModelReply)},
  { 17, -1, -1, sizeof(::reef::rpc::SetPriorityRequest)},
  { 24, -1, -1, sizeof(::reef::rpc::SetPriorityReply)},
  { 32, -1, -1, sizeof(::reef::rpc::RegisterBlobRequest)},
  { 40, -1, -1, sizeof(::reef::rpc::RegisterBlobReply)},
  { 49, -1, -1, sizeof(::reef::rpc::GetBlobRequest)},
  { 56, -1, -1, sizeof(::reef::rpc::GetBlobReply)},
  { 63, -1, -1, sizeof(::reef::rpc::SetBlobRequest)},
  { 70, -1, -1, sizeof(::reef::rpc::SetBlobReply)},
  { 77, -1, -1, sizeof(::reef::rpc::InferRequest)},
  { 85, -1, -1, sizeof(::reef::rpc::InferReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_LoadModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_LoadModelReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_SetPriorityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_SetPriorityReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_RegisterBlobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_RegisterBlobReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_GetBlobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_GetBlobReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_SetBlobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_SetBlobReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_InferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reef::rpc::_InferReply_default_instance_),
};

const char descriptor_table_protodef_reef_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nreef.proto\022\010reef.rpc\":\n\020LoadModelReque"
  "st\022\013\n\003dir\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003qid\030\003 \001"
  "(\005\"+\n\016LoadModelReply\022\014\n\004succ\030\001 \001(\010\022\013\n\003mi"
  "d\030\002 \001(\005\" \n\022SetPriorityRequest\022\n\n\002rt\030\001 \001("
  "\010\"-\n\020SetPriorityReply\022\014\n\004succ\030\001 \001(\010\022\013\n\003q"
  "id\030\002 \001(\005\"0\n\023RegisterBlobRequest\022\013\n\003mid\030\001"
  " \001(\005\022\014\n\004name\030\002 \001(\t\"<\n\021RegisterBlobReply\022"
  "\014\n\004succ\030\001 \001(\010\022\013\n\003key\030\002 \001(\t\022\014\n\004size\030\003 \001(\003"
  "\"\035\n\016GetBlobRequest\022\013\n\003key\030\001 \001(\t\"\034\n\014GetBl"
  "obReply\022\014\n\004succ\030\001 \001(\010\"\035\n\016SetBlobRequest\022"
  "\013\n\003key\030\001 \001(\t\"\034\n\014SetBlobReply\022\014\n\004succ\030\001 \001"
  "(\010\"*\n\014InferRequest\022\013\n\003mid\030\001 \001(\005\022\r\n\005async"
  "\030\002 \001(\010\"\'\n\nInferReply\022\014\n\004succ\030\001 \001(\010\022\013\n\003ti"
  "d\030\002 \001(\0052\242\003\n\013REEFService\022C\n\tLoadModel\022\032.r"
  "eef.rpc.LoadModelRequest\032\030.reef.rpc.Load"
  "ModelReply\"\000\022I\n\013SetPriority\022\034.reef.rpc.S"
  "etPriorityRequest\032\032.reef.rpc.SetPriority"
  "Reply\"\000\022L\n\014RegisterBlob\022\035.reef.rpc.Regis"
  "terBlobRequest\032\033.reef.rpc.RegisterBlobRe"
  "ply\"\000\022=\n\007GetBlob\022\030.reef.rpc.GetBlobReque"
  "st\032\026.reef.rpc.GetBlobReply\"\000\022=\n\007SetBlob\022"
  "\030.reef.rpc.SetBlobRequest\032\026.reef.rpc.Set"
  "BlobReply\"\000\0227\n\005Infer\022\026.reef.rpc.InferReq"
  "uest\032\024.reef.rpc.InferReply\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_reef_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_reef_2eproto = {
  false, false, 956, descriptor_table_protodef_reef_2eproto, "reef.proto", 
  &descriptor_table_reef_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_reef_2eproto::offsets,
  file_level_metadata_reef_2eproto, file_level_enum_descriptors_reef_2eproto, file_level_service_descriptors_reef_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_reef_2eproto_getter() {
  return &descriptor_table_reef_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_reef_2eproto(&descriptor_table_reef_2eproto);
namespace reef {
namespace rpc {

// ===================================================================

class LoadModelRequest::_Internal {
 public:
};

LoadModelRequest::LoadModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.LoadModelRequest)
}
LoadModelRequest::LoadModelRequest(const LoadModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dir().empty()) {
    dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dir(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  qid_ = from.qid_;
  // @@protoc_insertion_point(copy_constructor:reef.rpc.LoadModelRequest)
}

void LoadModelRequest::SharedCtor() {
dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
qid_ = 0;
}

LoadModelRequest::~LoadModelRequest() {
  // @@protoc_insertion_point(destructor:reef.rpc.LoadModelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadModelRequest::ArenaDtor(void* object) {
  LoadModelRequest* _this = reinterpret_cast< LoadModelRequest* >(object);
  (void)_this;
}
void LoadModelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.LoadModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_.ClearToEmpty();
  name_.ClearToEmpty();
  qid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "reef.rpc.LoadModelRequest.dir"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "reef.rpc.LoadModelRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          qid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadModelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.LoadModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dir = 1;
  if (!this->_internal_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dir().data(), static_cast<int>(this->_internal_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reef.rpc.LoadModelRequest.dir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dir(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reef.rpc.LoadModelRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 qid = 3;
  if (this->_internal_qid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_qid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.LoadModelRequest)
  return target;
}

size_t LoadModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.LoadModelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dir = 1;
  if (!this->_internal_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dir());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 qid = 3;
  if (this->_internal_qid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_qid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadModelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadModelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadModelRequest::GetClassData() const { return &_class_data_; }

void LoadModelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoadModelRequest *>(to)->MergeFrom(
      static_cast<const LoadModelRequest &>(from));
}


void LoadModelRequest::MergeFrom(const LoadModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.LoadModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dir().empty()) {
    _internal_set_dir(from._internal_dir());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_qid() != 0) {
    _internal_set_qid(from._internal_qid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadModelRequest::CopyFrom(const LoadModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.LoadModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadModelRequest::IsInitialized() const {
  return true;
}

void LoadModelRequest::InternalSwap(LoadModelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dir_, lhs_arena,
      &other->dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(qid_, other->qid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadModelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[0]);
}

// ===================================================================

class LoadModelReply::_Internal {
 public:
};

LoadModelReply::LoadModelReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.LoadModelReply)
}
LoadModelReply::LoadModelReply(const LoadModelReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&succ_, &from.succ_,
    static_cast<size_t>(reinterpret_cast<char*>(&mid_) -
    reinterpret_cast<char*>(&succ_)) + sizeof(mid_));
  // @@protoc_insertion_point(copy_constructor:reef.rpc.LoadModelReply)
}

void LoadModelReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&succ_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mid_) -
    reinterpret_cast<char*>(&succ_)) + sizeof(mid_));
}

LoadModelReply::~LoadModelReply() {
  // @@protoc_insertion_point(destructor:reef.rpc.LoadModelReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadModelReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoadModelReply::ArenaDtor(void* object) {
  LoadModelReply* _this = reinterpret_cast< LoadModelReply* >(object);
  (void)_this;
}
void LoadModelReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadModelReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadModelReply::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.LoadModelReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&succ_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mid_) -
      reinterpret_cast<char*>(&succ_)) + sizeof(mid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadModelReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          succ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadModelReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.LoadModelReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_succ(), target);
  }

  // int32 mid = 2;
  if (this->_internal_mid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.LoadModelReply)
  return target;
}

size_t LoadModelReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.LoadModelReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    total_size += 1 + 1;
  }

  // int32 mid = 2;
  if (this->_internal_mid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadModelReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadModelReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadModelReply::GetClassData() const { return &_class_data_; }

void LoadModelReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoadModelReply *>(to)->MergeFrom(
      static_cast<const LoadModelReply &>(from));
}


void LoadModelReply::MergeFrom(const LoadModelReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.LoadModelReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_succ() != 0) {
    _internal_set_succ(from._internal_succ());
  }
  if (from._internal_mid() != 0) {
    _internal_set_mid(from._internal_mid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadModelReply::CopyFrom(const LoadModelReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.LoadModelReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadModelReply::IsInitialized() const {
  return true;
}

void LoadModelReply::InternalSwap(LoadModelReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadModelReply, mid_)
      + sizeof(LoadModelReply::mid_)
      - PROTOBUF_FIELD_OFFSET(LoadModelReply, succ_)>(
          reinterpret_cast<char*>(&succ_),
          reinterpret_cast<char*>(&other->succ_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadModelReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[1]);
}

// ===================================================================

class SetPriorityRequest::_Internal {
 public:
};

SetPriorityRequest::SetPriorityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.SetPriorityRequest)
}
SetPriorityRequest::SetPriorityRequest(const SetPriorityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rt_ = from.rt_;
  // @@protoc_insertion_point(copy_constructor:reef.rpc.SetPriorityRequest)
}

void SetPriorityRequest::SharedCtor() {
rt_ = false;
}

SetPriorityRequest::~SetPriorityRequest() {
  // @@protoc_insertion_point(destructor:reef.rpc.SetPriorityRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetPriorityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetPriorityRequest::ArenaDtor(void* object) {
  SetPriorityRequest* _this = reinterpret_cast< SetPriorityRequest* >(object);
  (void)_this;
}
void SetPriorityRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPriorityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPriorityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.SetPriorityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rt_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPriorityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool rt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPriorityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.SetPriorityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rt = 1;
  if (this->_internal_rt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_rt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.SetPriorityRequest)
  return target;
}

size_t SetPriorityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.SetPriorityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool rt = 1;
  if (this->_internal_rt() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPriorityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPriorityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPriorityRequest::GetClassData() const { return &_class_data_; }

void SetPriorityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetPriorityRequest *>(to)->MergeFrom(
      static_cast<const SetPriorityRequest &>(from));
}


void SetPriorityRequest::MergeFrom(const SetPriorityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.SetPriorityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rt() != 0) {
    _internal_set_rt(from._internal_rt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPriorityRequest::CopyFrom(const SetPriorityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.SetPriorityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPriorityRequest::IsInitialized() const {
  return true;
}

void SetPriorityRequest::InternalSwap(SetPriorityRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rt_, other->rt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPriorityRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[2]);
}

// ===================================================================

class SetPriorityReply::_Internal {
 public:
};

SetPriorityReply::SetPriorityReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.SetPriorityReply)
}
SetPriorityReply::SetPriorityReply(const SetPriorityReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&succ_, &from.succ_,
    static_cast<size_t>(reinterpret_cast<char*>(&qid_) -
    reinterpret_cast<char*>(&succ_)) + sizeof(qid_));
  // @@protoc_insertion_point(copy_constructor:reef.rpc.SetPriorityReply)
}

void SetPriorityReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&succ_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&qid_) -
    reinterpret_cast<char*>(&succ_)) + sizeof(qid_));
}

SetPriorityReply::~SetPriorityReply() {
  // @@protoc_insertion_point(destructor:reef.rpc.SetPriorityReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetPriorityReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetPriorityReply::ArenaDtor(void* object) {
  SetPriorityReply* _this = reinterpret_cast< SetPriorityReply* >(object);
  (void)_this;
}
void SetPriorityReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPriorityReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPriorityReply::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.SetPriorityReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&succ_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qid_) -
      reinterpret_cast<char*>(&succ_)) + sizeof(qid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPriorityReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          succ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          qid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPriorityReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.SetPriorityReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_succ(), target);
  }

  // int32 qid = 2;
  if (this->_internal_qid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_qid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.SetPriorityReply)
  return target;
}

size_t SetPriorityReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.SetPriorityReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    total_size += 1 + 1;
  }

  // int32 qid = 2;
  if (this->_internal_qid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_qid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPriorityReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPriorityReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPriorityReply::GetClassData() const { return &_class_data_; }

void SetPriorityReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetPriorityReply *>(to)->MergeFrom(
      static_cast<const SetPriorityReply &>(from));
}


void SetPriorityReply::MergeFrom(const SetPriorityReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.SetPriorityReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_succ() != 0) {
    _internal_set_succ(from._internal_succ());
  }
  if (from._internal_qid() != 0) {
    _internal_set_qid(from._internal_qid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPriorityReply::CopyFrom(const SetPriorityReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.SetPriorityReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPriorityReply::IsInitialized() const {
  return true;
}

void SetPriorityReply::InternalSwap(SetPriorityReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPriorityReply, qid_)
      + sizeof(SetPriorityReply::qid_)
      - PROTOBUF_FIELD_OFFSET(SetPriorityReply, succ_)>(
          reinterpret_cast<char*>(&succ_),
          reinterpret_cast<char*>(&other->succ_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPriorityReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[3]);
}

// ===================================================================

class RegisterBlobRequest::_Internal {
 public:
};

RegisterBlobRequest::RegisterBlobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.RegisterBlobRequest)
}
RegisterBlobRequest::RegisterBlobRequest(const RegisterBlobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:reef.rpc.RegisterBlobRequest)
}

void RegisterBlobRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mid_ = 0;
}

RegisterBlobRequest::~RegisterBlobRequest() {
  // @@protoc_insertion_point(destructor:reef.rpc.RegisterBlobRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterBlobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterBlobRequest::ArenaDtor(void* object) {
  RegisterBlobRequest* _this = reinterpret_cast< RegisterBlobRequest* >(object);
  (void)_this;
}
void RegisterBlobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterBlobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterBlobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.RegisterBlobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  mid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterBlobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "reef.rpc.RegisterBlobRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterBlobRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.RegisterBlobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->_internal_mid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reef.rpc.RegisterBlobRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.RegisterBlobRequest)
  return target;
}

size_t RegisterBlobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.RegisterBlobRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 mid = 1;
  if (this->_internal_mid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterBlobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterBlobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterBlobRequest::GetClassData() const { return &_class_data_; }

void RegisterBlobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterBlobRequest *>(to)->MergeFrom(
      static_cast<const RegisterBlobRequest &>(from));
}


void RegisterBlobRequest::MergeFrom(const RegisterBlobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.RegisterBlobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_mid() != 0) {
    _internal_set_mid(from._internal_mid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterBlobRequest::CopyFrom(const RegisterBlobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.RegisterBlobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterBlobRequest::IsInitialized() const {
  return true;
}

void RegisterBlobRequest::InternalSwap(RegisterBlobRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterBlobRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[4]);
}

// ===================================================================

class RegisterBlobReply::_Internal {
 public:
};

RegisterBlobReply::RegisterBlobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.RegisterBlobReply)
}
RegisterBlobReply::RegisterBlobReply(const RegisterBlobReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&succ_) -
    reinterpret_cast<char*>(&size_)) + sizeof(succ_));
  // @@protoc_insertion_point(copy_constructor:reef.rpc.RegisterBlobReply)
}

void RegisterBlobReply::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&succ_) -
    reinterpret_cast<char*>(&size_)) + sizeof(succ_));
}

RegisterBlobReply::~RegisterBlobReply() {
  // @@protoc_insertion_point(destructor:reef.rpc.RegisterBlobReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterBlobReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterBlobReply::ArenaDtor(void* object) {
  RegisterBlobReply* _this = reinterpret_cast< RegisterBlobReply* >(object);
  (void)_this;
}
void RegisterBlobReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterBlobReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterBlobReply::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.RegisterBlobReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&succ_) -
      reinterpret_cast<char*>(&size_)) + sizeof(succ_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterBlobReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          succ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "reef.rpc.RegisterBlobReply.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterBlobReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.RegisterBlobReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_succ(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reef.rpc.RegisterBlobReply.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.RegisterBlobReply)
  return target;
}

size_t RegisterBlobReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.RegisterBlobReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterBlobReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterBlobReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterBlobReply::GetClassData() const { return &_class_data_; }

void RegisterBlobReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterBlobReply *>(to)->MergeFrom(
      static_cast<const RegisterBlobReply &>(from));
}


void RegisterBlobReply::MergeFrom(const RegisterBlobReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.RegisterBlobReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_succ() != 0) {
    _internal_set_succ(from._internal_succ());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterBlobReply::CopyFrom(const RegisterBlobReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.RegisterBlobReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterBlobReply::IsInitialized() const {
  return true;
}

void RegisterBlobReply::InternalSwap(RegisterBlobReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterBlobReply, succ_)
      + sizeof(RegisterBlobReply::succ_)
      - PROTOBUF_FIELD_OFFSET(RegisterBlobReply, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterBlobReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[5]);
}

// ===================================================================

class GetBlobRequest::_Internal {
 public:
};

GetBlobRequest::GetBlobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.GetBlobRequest)
}
GetBlobRequest::GetBlobRequest(const GetBlobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:reef.rpc.GetBlobRequest)
}

void GetBlobRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlobRequest::~GetBlobRequest() {
  // @@protoc_insertion_point(destructor:reef.rpc.GetBlobRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlobRequest::ArenaDtor(void* object) {
  GetBlobRequest* _this = reinterpret_cast< GetBlobRequest* >(object);
  (void)_this;
}
void GetBlobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.GetBlobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "reef.rpc.GetBlobRequest.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlobRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.GetBlobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reef.rpc.GetBlobRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.GetBlobRequest)
  return target;
}

size_t GetBlobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.GetBlobRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlobRequest::GetClassData() const { return &_class_data_; }

void GetBlobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBlobRequest *>(to)->MergeFrom(
      static_cast<const GetBlobRequest &>(from));
}


void GetBlobRequest::MergeFrom(const GetBlobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.GetBlobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlobRequest::CopyFrom(const GetBlobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.GetBlobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlobRequest::IsInitialized() const {
  return true;
}

void GetBlobRequest::InternalSwap(GetBlobRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlobRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[6]);
}

// ===================================================================

class GetBlobReply::_Internal {
 public:
};

GetBlobReply::GetBlobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.GetBlobReply)
}
GetBlobReply::GetBlobReply(const GetBlobReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  succ_ = from.succ_;
  // @@protoc_insertion_point(copy_constructor:reef.rpc.GetBlobReply)
}

void GetBlobReply::SharedCtor() {
succ_ = false;
}

GetBlobReply::~GetBlobReply() {
  // @@protoc_insertion_point(destructor:reef.rpc.GetBlobReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlobReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBlobReply::ArenaDtor(void* object) {
  GetBlobReply* _this = reinterpret_cast< GetBlobReply* >(object);
  (void)_this;
}
void GetBlobReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlobReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlobReply::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.GetBlobReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  succ_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlobReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          succ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlobReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.GetBlobReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_succ(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.GetBlobReply)
  return target;
}

size_t GetBlobReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.GetBlobReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlobReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlobReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlobReply::GetClassData() const { return &_class_data_; }

void GetBlobReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBlobReply *>(to)->MergeFrom(
      static_cast<const GetBlobReply &>(from));
}


void GetBlobReply::MergeFrom(const GetBlobReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.GetBlobReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_succ() != 0) {
    _internal_set_succ(from._internal_succ());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlobReply::CopyFrom(const GetBlobReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.GetBlobReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlobReply::IsInitialized() const {
  return true;
}

void GetBlobReply::InternalSwap(GetBlobReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(succ_, other->succ_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlobReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[7]);
}

// ===================================================================

class SetBlobRequest::_Internal {
 public:
};

SetBlobRequest::SetBlobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.SetBlobRequest)
}
SetBlobRequest::SetBlobRequest(const SetBlobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:reef.rpc.SetBlobRequest)
}

void SetBlobRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetBlobRequest::~SetBlobRequest() {
  // @@protoc_insertion_point(destructor:reef.rpc.SetBlobRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetBlobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetBlobRequest::ArenaDtor(void* object) {
  SetBlobRequest* _this = reinterpret_cast< SetBlobRequest* >(object);
  (void)_this;
}
void SetBlobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBlobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBlobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.SetBlobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBlobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "reef.rpc.SetBlobRequest.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetBlobRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.SetBlobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reef.rpc.SetBlobRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.SetBlobRequest)
  return target;
}

size_t SetBlobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.SetBlobRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBlobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetBlobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBlobRequest::GetClassData() const { return &_class_data_; }

void SetBlobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetBlobRequest *>(to)->MergeFrom(
      static_cast<const SetBlobRequest &>(from));
}


void SetBlobRequest::MergeFrom(const SetBlobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.SetBlobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBlobRequest::CopyFrom(const SetBlobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.SetBlobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBlobRequest::IsInitialized() const {
  return true;
}

void SetBlobRequest::InternalSwap(SetBlobRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBlobRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[8]);
}

// ===================================================================

class SetBlobReply::_Internal {
 public:
};

SetBlobReply::SetBlobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.SetBlobReply)
}
SetBlobReply::SetBlobReply(const SetBlobReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  succ_ = from.succ_;
  // @@protoc_insertion_point(copy_constructor:reef.rpc.SetBlobReply)
}

void SetBlobReply::SharedCtor() {
succ_ = false;
}

SetBlobReply::~SetBlobReply() {
  // @@protoc_insertion_point(destructor:reef.rpc.SetBlobReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetBlobReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetBlobReply::ArenaDtor(void* object) {
  SetBlobReply* _this = reinterpret_cast< SetBlobReply* >(object);
  (void)_this;
}
void SetBlobReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBlobReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBlobReply::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.SetBlobReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  succ_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBlobReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          succ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetBlobReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.SetBlobReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_succ(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.SetBlobReply)
  return target;
}

size_t SetBlobReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.SetBlobReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBlobReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetBlobReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBlobReply::GetClassData() const { return &_class_data_; }

void SetBlobReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetBlobReply *>(to)->MergeFrom(
      static_cast<const SetBlobReply &>(from));
}


void SetBlobReply::MergeFrom(const SetBlobReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.SetBlobReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_succ() != 0) {
    _internal_set_succ(from._internal_succ());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBlobReply::CopyFrom(const SetBlobReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.SetBlobReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBlobReply::IsInitialized() const {
  return true;
}

void SetBlobReply::InternalSwap(SetBlobReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(succ_, other->succ_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBlobReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[9]);
}

// ===================================================================

class InferRequest::_Internal {
 public:
};

InferRequest::InferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.InferRequest)
}
InferRequest::InferRequest(const InferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&async_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(async_));
  // @@protoc_insertion_point(copy_constructor:reef.rpc.InferRequest)
}

void InferRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&async_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(async_));
}

InferRequest::~InferRequest() {
  // @@protoc_insertion_point(destructor:reef.rpc.InferRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InferRequest::ArenaDtor(void* object) {
  InferRequest* _this = reinterpret_cast< InferRequest* >(object);
  (void)_this;
}
void InferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.InferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&async_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(async_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool async = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          async_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InferRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.InferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->_internal_mid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // bool async = 2;
  if (this->_internal_async() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_async(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.InferRequest)
  return target;
}

size_t InferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.InferRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->_internal_mid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mid());
  }

  // bool async = 2;
  if (this->_internal_async() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferRequest::GetClassData() const { return &_class_data_; }

void InferRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferRequest *>(to)->MergeFrom(
      static_cast<const InferRequest &>(from));
}


void InferRequest::MergeFrom(const InferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.InferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mid() != 0) {
    _internal_set_mid(from._internal_mid());
  }
  if (from._internal_async() != 0) {
    _internal_set_async(from._internal_async());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferRequest::CopyFrom(const InferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.InferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferRequest::IsInitialized() const {
  return true;
}

void InferRequest::InternalSwap(InferRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferRequest, async_)
      + sizeof(InferRequest::async_)
      - PROTOBUF_FIELD_OFFSET(InferRequest, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[10]);
}

// ===================================================================

class InferReply::_Internal {
 public:
};

InferReply::InferReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:reef.rpc.InferReply)
}
InferReply::InferReply(const InferReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&succ_, &from.succ_,
    static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&succ_)) + sizeof(tid_));
  // @@protoc_insertion_point(copy_constructor:reef.rpc.InferReply)
}

void InferReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&succ_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&succ_)) + sizeof(tid_));
}

InferReply::~InferReply() {
  // @@protoc_insertion_point(destructor:reef.rpc.InferReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InferReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InferReply::ArenaDtor(void* object) {
  InferReply* _this = reinterpret_cast< InferReply* >(object);
  (void)_this;
}
void InferReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferReply::Clear() {
// @@protoc_insertion_point(message_clear_start:reef.rpc.InferReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&succ_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tid_) -
      reinterpret_cast<char*>(&succ_)) + sizeof(tid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          succ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InferReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reef.rpc.InferReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_succ(), target);
  }

  // int32 tid = 2;
  if (this->_internal_tid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reef.rpc.InferReply)
  return target;
}

size_t InferReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reef.rpc.InferReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool succ = 1;
  if (this->_internal_succ() != 0) {
    total_size += 1 + 1;
  }

  // int32 tid = 2;
  if (this->_internal_tid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferReply::GetClassData() const { return &_class_data_; }

void InferReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferReply *>(to)->MergeFrom(
      static_cast<const InferReply &>(from));
}


void InferReply::MergeFrom(const InferReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reef.rpc.InferReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_succ() != 0) {
    _internal_set_succ(from._internal_succ());
  }
  if (from._internal_tid() != 0) {
    _internal_set_tid(from._internal_tid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferReply::CopyFrom(const InferReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reef.rpc.InferReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferReply::IsInitialized() const {
  return true;
}

void InferReply::InternalSwap(InferReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferReply, tid_)
      + sizeof(InferReply::tid_)
      - PROTOBUF_FIELD_OFFSET(InferReply, succ_)>(
          reinterpret_cast<char*>(&succ_),
          reinterpret_cast<char*>(&other->succ_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_reef_2eproto_getter, &descriptor_table_reef_2eproto_once,
      file_level_metadata_reef_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace reef
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::reef::rpc::LoadModelRequest* Arena::CreateMaybeMessage< ::reef::rpc::LoadModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::LoadModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::LoadModelReply* Arena::CreateMaybeMessage< ::reef::rpc::LoadModelReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::LoadModelReply >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::SetPriorityRequest* Arena::CreateMaybeMessage< ::reef::rpc::SetPriorityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::SetPriorityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::SetPriorityReply* Arena::CreateMaybeMessage< ::reef::rpc::SetPriorityReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::SetPriorityReply >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::RegisterBlobRequest* Arena::CreateMaybeMessage< ::reef::rpc::RegisterBlobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::RegisterBlobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::RegisterBlobReply* Arena::CreateMaybeMessage< ::reef::rpc::RegisterBlobReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::RegisterBlobReply >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::GetBlobRequest* Arena::CreateMaybeMessage< ::reef::rpc::GetBlobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::GetBlobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::GetBlobReply* Arena::CreateMaybeMessage< ::reef::rpc::GetBlobReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::GetBlobReply >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::SetBlobRequest* Arena::CreateMaybeMessage< ::reef::rpc::SetBlobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::SetBlobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::SetBlobReply* Arena::CreateMaybeMessage< ::reef::rpc::SetBlobReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::SetBlobReply >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::InferRequest* Arena::CreateMaybeMessage< ::reef::rpc::InferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::InferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::reef::rpc::InferReply* Arena::CreateMaybeMessage< ::reef::rpc::InferReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reef::rpc::InferReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

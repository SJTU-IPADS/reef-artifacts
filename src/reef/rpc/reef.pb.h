// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reef.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_reef_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_reef_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_reef_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_reef_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_reef_2eproto;
namespace reef {
namespace rpc {
class GetBlobReply;
struct GetBlobReplyDefaultTypeInternal;
extern GetBlobReplyDefaultTypeInternal _GetBlobReply_default_instance_;
class GetBlobRequest;
struct GetBlobRequestDefaultTypeInternal;
extern GetBlobRequestDefaultTypeInternal _GetBlobRequest_default_instance_;
class InferReply;
struct InferReplyDefaultTypeInternal;
extern InferReplyDefaultTypeInternal _InferReply_default_instance_;
class InferRequest;
struct InferRequestDefaultTypeInternal;
extern InferRequestDefaultTypeInternal _InferRequest_default_instance_;
class LoadModelReply;
struct LoadModelReplyDefaultTypeInternal;
extern LoadModelReplyDefaultTypeInternal _LoadModelReply_default_instance_;
class LoadModelRequest;
struct LoadModelRequestDefaultTypeInternal;
extern LoadModelRequestDefaultTypeInternal _LoadModelRequest_default_instance_;
class RegisterBlobReply;
struct RegisterBlobReplyDefaultTypeInternal;
extern RegisterBlobReplyDefaultTypeInternal _RegisterBlobReply_default_instance_;
class RegisterBlobRequest;
struct RegisterBlobRequestDefaultTypeInternal;
extern RegisterBlobRequestDefaultTypeInternal _RegisterBlobRequest_default_instance_;
class SetBlobReply;
struct SetBlobReplyDefaultTypeInternal;
extern SetBlobReplyDefaultTypeInternal _SetBlobReply_default_instance_;
class SetBlobRequest;
struct SetBlobRequestDefaultTypeInternal;
extern SetBlobRequestDefaultTypeInternal _SetBlobRequest_default_instance_;
class SetPriorityReply;
struct SetPriorityReplyDefaultTypeInternal;
extern SetPriorityReplyDefaultTypeInternal _SetPriorityReply_default_instance_;
class SetPriorityRequest;
struct SetPriorityRequestDefaultTypeInternal;
extern SetPriorityRequestDefaultTypeInternal _SetPriorityRequest_default_instance_;
}  // namespace rpc
}  // namespace reef
PROTOBUF_NAMESPACE_OPEN
template<> ::reef::rpc::GetBlobReply* Arena::CreateMaybeMessage<::reef::rpc::GetBlobReply>(Arena*);
template<> ::reef::rpc::GetBlobRequest* Arena::CreateMaybeMessage<::reef::rpc::GetBlobRequest>(Arena*);
template<> ::reef::rpc::InferReply* Arena::CreateMaybeMessage<::reef::rpc::InferReply>(Arena*);
template<> ::reef::rpc::InferRequest* Arena::CreateMaybeMessage<::reef::rpc::InferRequest>(Arena*);
template<> ::reef::rpc::LoadModelReply* Arena::CreateMaybeMessage<::reef::rpc::LoadModelReply>(Arena*);
template<> ::reef::rpc::LoadModelRequest* Arena::CreateMaybeMessage<::reef::rpc::LoadModelRequest>(Arena*);
template<> ::reef::rpc::RegisterBlobReply* Arena::CreateMaybeMessage<::reef::rpc::RegisterBlobReply>(Arena*);
template<> ::reef::rpc::RegisterBlobRequest* Arena::CreateMaybeMessage<::reef::rpc::RegisterBlobRequest>(Arena*);
template<> ::reef::rpc::SetBlobReply* Arena::CreateMaybeMessage<::reef::rpc::SetBlobReply>(Arena*);
template<> ::reef::rpc::SetBlobRequest* Arena::CreateMaybeMessage<::reef::rpc::SetBlobRequest>(Arena*);
template<> ::reef::rpc::SetPriorityReply* Arena::CreateMaybeMessage<::reef::rpc::SetPriorityReply>(Arena*);
template<> ::reef::rpc::SetPriorityRequest* Arena::CreateMaybeMessage<::reef::rpc::SetPriorityRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace reef {
namespace rpc {

// ===================================================================

class LoadModelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.LoadModelRequest) */ {
 public:
  inline LoadModelRequest() : LoadModelRequest(nullptr) {}
  ~LoadModelRequest() override;
  explicit constexpr LoadModelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadModelRequest(const LoadModelRequest& from);
  LoadModelRequest(LoadModelRequest&& from) noexcept
    : LoadModelRequest() {
    *this = ::std::move(from);
  }

  inline LoadModelRequest& operator=(const LoadModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadModelRequest& operator=(LoadModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadModelRequest* internal_default_instance() {
    return reinterpret_cast<const LoadModelRequest*>(
               &_LoadModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadModelRequest& a, LoadModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadModelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadModelRequest* New() const final {
    return new LoadModelRequest();
  }

  LoadModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadModelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadModelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadModelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.LoadModelRequest";
  }
  protected:
  explicit LoadModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 1,
    kNameFieldNumber = 2,
    kQidFieldNumber = 3,
  };
  // string dir = 1;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_MUST_USE_RESULT std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 qid = 3;
  void clear_qid();
  ::PROTOBUF_NAMESPACE_ID::int32 qid() const;
  void set_qid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qid() const;
  void _internal_set_qid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.LoadModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 qid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class LoadModelReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.LoadModelReply) */ {
 public:
  inline LoadModelReply() : LoadModelReply(nullptr) {}
  ~LoadModelReply() override;
  explicit constexpr LoadModelReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadModelReply(const LoadModelReply& from);
  LoadModelReply(LoadModelReply&& from) noexcept
    : LoadModelReply() {
    *this = ::std::move(from);
  }

  inline LoadModelReply& operator=(const LoadModelReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadModelReply& operator=(LoadModelReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadModelReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadModelReply* internal_default_instance() {
    return reinterpret_cast<const LoadModelReply*>(
               &_LoadModelReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoadModelReply& a, LoadModelReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadModelReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadModelReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadModelReply* New() const final {
    return new LoadModelReply();
  }

  LoadModelReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadModelReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadModelReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadModelReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadModelReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.LoadModelReply";
  }
  protected:
  explicit LoadModelReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccFieldNumber = 1,
    kMidFieldNumber = 2,
  };
  // bool succ = 1;
  void clear_succ();
  bool succ() const;
  void set_succ(bool value);
  private:
  bool _internal_succ() const;
  void _internal_set_succ(bool value);
  public:

  // int32 mid = 2;
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.LoadModelReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool succ_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class SetPriorityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.SetPriorityRequest) */ {
 public:
  inline SetPriorityRequest() : SetPriorityRequest(nullptr) {}
  ~SetPriorityRequest() override;
  explicit constexpr SetPriorityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPriorityRequest(const SetPriorityRequest& from);
  SetPriorityRequest(SetPriorityRequest&& from) noexcept
    : SetPriorityRequest() {
    *this = ::std::move(from);
  }

  inline SetPriorityRequest& operator=(const SetPriorityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPriorityRequest& operator=(SetPriorityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPriorityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPriorityRequest* internal_default_instance() {
    return reinterpret_cast<const SetPriorityRequest*>(
               &_SetPriorityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetPriorityRequest& a, SetPriorityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPriorityRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPriorityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPriorityRequest* New() const final {
    return new SetPriorityRequest();
  }

  SetPriorityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPriorityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPriorityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPriorityRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPriorityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.SetPriorityRequest";
  }
  protected:
  explicit SetPriorityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtFieldNumber = 1,
  };
  // bool rt = 1;
  void clear_rt();
  bool rt() const;
  void set_rt(bool value);
  private:
  bool _internal_rt() const;
  void _internal_set_rt(bool value);
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.SetPriorityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool rt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class SetPriorityReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.SetPriorityReply) */ {
 public:
  inline SetPriorityReply() : SetPriorityReply(nullptr) {}
  ~SetPriorityReply() override;
  explicit constexpr SetPriorityReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPriorityReply(const SetPriorityReply& from);
  SetPriorityReply(SetPriorityReply&& from) noexcept
    : SetPriorityReply() {
    *this = ::std::move(from);
  }

  inline SetPriorityReply& operator=(const SetPriorityReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPriorityReply& operator=(SetPriorityReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPriorityReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPriorityReply* internal_default_instance() {
    return reinterpret_cast<const SetPriorityReply*>(
               &_SetPriorityReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetPriorityReply& a, SetPriorityReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPriorityReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPriorityReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPriorityReply* New() const final {
    return new SetPriorityReply();
  }

  SetPriorityReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPriorityReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPriorityReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPriorityReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPriorityReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.SetPriorityReply";
  }
  protected:
  explicit SetPriorityReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccFieldNumber = 1,
    kQidFieldNumber = 2,
  };
  // bool succ = 1;
  void clear_succ();
  bool succ() const;
  void set_succ(bool value);
  private:
  bool _internal_succ() const;
  void _internal_set_succ(bool value);
  public:

  // int32 qid = 2;
  void clear_qid();
  ::PROTOBUF_NAMESPACE_ID::int32 qid() const;
  void set_qid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qid() const;
  void _internal_set_qid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.SetPriorityReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool succ_;
  ::PROTOBUF_NAMESPACE_ID::int32 qid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class RegisterBlobRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.RegisterBlobRequest) */ {
 public:
  inline RegisterBlobRequest() : RegisterBlobRequest(nullptr) {}
  ~RegisterBlobRequest() override;
  explicit constexpr RegisterBlobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterBlobRequest(const RegisterBlobRequest& from);
  RegisterBlobRequest(RegisterBlobRequest&& from) noexcept
    : RegisterBlobRequest() {
    *this = ::std::move(from);
  }

  inline RegisterBlobRequest& operator=(const RegisterBlobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterBlobRequest& operator=(RegisterBlobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterBlobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterBlobRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterBlobRequest*>(
               &_RegisterBlobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterBlobRequest& a, RegisterBlobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterBlobRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterBlobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterBlobRequest* New() const final {
    return new RegisterBlobRequest();
  }

  RegisterBlobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterBlobRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterBlobRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterBlobRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterBlobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.RegisterBlobRequest";
  }
  protected:
  explicit RegisterBlobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMidFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 mid = 1;
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.RegisterBlobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class RegisterBlobReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.RegisterBlobReply) */ {
 public:
  inline RegisterBlobReply() : RegisterBlobReply(nullptr) {}
  ~RegisterBlobReply() override;
  explicit constexpr RegisterBlobReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterBlobReply(const RegisterBlobReply& from);
  RegisterBlobReply(RegisterBlobReply&& from) noexcept
    : RegisterBlobReply() {
    *this = ::std::move(from);
  }

  inline RegisterBlobReply& operator=(const RegisterBlobReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterBlobReply& operator=(RegisterBlobReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterBlobReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterBlobReply* internal_default_instance() {
    return reinterpret_cast<const RegisterBlobReply*>(
               &_RegisterBlobReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterBlobReply& a, RegisterBlobReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterBlobReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterBlobReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterBlobReply* New() const final {
    return new RegisterBlobReply();
  }

  RegisterBlobReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterBlobReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterBlobReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterBlobReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterBlobReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.RegisterBlobReply";
  }
  protected:
  explicit RegisterBlobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kSizeFieldNumber = 3,
    kSuccFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool succ = 1;
  void clear_succ();
  bool succ() const;
  void set_succ(bool value);
  private:
  bool _internal_succ() const;
  void _internal_set_succ(bool value);
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.RegisterBlobReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  bool succ_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class GetBlobRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.GetBlobRequest) */ {
 public:
  inline GetBlobRequest() : GetBlobRequest(nullptr) {}
  ~GetBlobRequest() override;
  explicit constexpr GetBlobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlobRequest(const GetBlobRequest& from);
  GetBlobRequest(GetBlobRequest&& from) noexcept
    : GetBlobRequest() {
    *this = ::std::move(from);
  }

  inline GetBlobRequest& operator=(const GetBlobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlobRequest& operator=(GetBlobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlobRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlobRequest*>(
               &_GetBlobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetBlobRequest& a, GetBlobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlobRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlobRequest* New() const final {
    return new GetBlobRequest();
  }

  GetBlobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlobRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlobRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlobRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.GetBlobRequest";
  }
  protected:
  explicit GetBlobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.GetBlobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class GetBlobReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.GetBlobReply) */ {
 public:
  inline GetBlobReply() : GetBlobReply(nullptr) {}
  ~GetBlobReply() override;
  explicit constexpr GetBlobReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlobReply(const GetBlobReply& from);
  GetBlobReply(GetBlobReply&& from) noexcept
    : GetBlobReply() {
    *this = ::std::move(from);
  }

  inline GetBlobReply& operator=(const GetBlobReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlobReply& operator=(GetBlobReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlobReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlobReply* internal_default_instance() {
    return reinterpret_cast<const GetBlobReply*>(
               &_GetBlobReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetBlobReply& a, GetBlobReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlobReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlobReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlobReply* New() const final {
    return new GetBlobReply();
  }

  GetBlobReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlobReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlobReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlobReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlobReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.GetBlobReply";
  }
  protected:
  explicit GetBlobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccFieldNumber = 1,
  };
  // bool succ = 1;
  void clear_succ();
  bool succ() const;
  void set_succ(bool value);
  private:
  bool _internal_succ() const;
  void _internal_set_succ(bool value);
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.GetBlobReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool succ_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class SetBlobRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.SetBlobRequest) */ {
 public:
  inline SetBlobRequest() : SetBlobRequest(nullptr) {}
  ~SetBlobRequest() override;
  explicit constexpr SetBlobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBlobRequest(const SetBlobRequest& from);
  SetBlobRequest(SetBlobRequest&& from) noexcept
    : SetBlobRequest() {
    *this = ::std::move(from);
  }

  inline SetBlobRequest& operator=(const SetBlobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBlobRequest& operator=(SetBlobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBlobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBlobRequest* internal_default_instance() {
    return reinterpret_cast<const SetBlobRequest*>(
               &_SetBlobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetBlobRequest& a, SetBlobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBlobRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBlobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBlobRequest* New() const final {
    return new SetBlobRequest();
  }

  SetBlobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBlobRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBlobRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetBlobRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBlobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.SetBlobRequest";
  }
  protected:
  explicit SetBlobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.SetBlobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class SetBlobReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.SetBlobReply) */ {
 public:
  inline SetBlobReply() : SetBlobReply(nullptr) {}
  ~SetBlobReply() override;
  explicit constexpr SetBlobReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBlobReply(const SetBlobReply& from);
  SetBlobReply(SetBlobReply&& from) noexcept
    : SetBlobReply() {
    *this = ::std::move(from);
  }

  inline SetBlobReply& operator=(const SetBlobReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBlobReply& operator=(SetBlobReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBlobReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBlobReply* internal_default_instance() {
    return reinterpret_cast<const SetBlobReply*>(
               &_SetBlobReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetBlobReply& a, SetBlobReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBlobReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBlobReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBlobReply* New() const final {
    return new SetBlobReply();
  }

  SetBlobReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBlobReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBlobReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetBlobReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBlobReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.SetBlobReply";
  }
  protected:
  explicit SetBlobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccFieldNumber = 1,
  };
  // bool succ = 1;
  void clear_succ();
  bool succ() const;
  void set_succ(bool value);
  private:
  bool _internal_succ() const;
  void _internal_set_succ(bool value);
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.SetBlobReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool succ_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class InferRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.InferRequest) */ {
 public:
  inline InferRequest() : InferRequest(nullptr) {}
  ~InferRequest() override;
  explicit constexpr InferRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferRequest(const InferRequest& from);
  InferRequest(InferRequest&& from) noexcept
    : InferRequest() {
    *this = ::std::move(from);
  }

  inline InferRequest& operator=(const InferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferRequest& operator=(InferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferRequest* internal_default_instance() {
    return reinterpret_cast<const InferRequest*>(
               &_InferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InferRequest& a, InferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InferRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InferRequest* New() const final {
    return new InferRequest();
  }

  InferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InferRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.InferRequest";
  }
  protected:
  explicit InferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMidFieldNumber = 1,
    kAsyncFieldNumber = 2,
  };
  // int32 mid = 1;
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool async = 2;
  void clear_async();
  bool async() const;
  void set_async(bool value);
  private:
  bool _internal_async() const;
  void _internal_set_async(bool value);
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.InferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  bool async_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// -------------------------------------------------------------------

class InferReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reef.rpc.InferReply) */ {
 public:
  inline InferReply() : InferReply(nullptr) {}
  ~InferReply() override;
  explicit constexpr InferReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferReply(const InferReply& from);
  InferReply(InferReply&& from) noexcept
    : InferReply() {
    *this = ::std::move(from);
  }

  inline InferReply& operator=(const InferReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferReply& operator=(InferReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferReply* internal_default_instance() {
    return reinterpret_cast<const InferReply*>(
               &_InferReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InferReply& a, InferReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InferReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InferReply* New() const final {
    return new InferReply();
  }

  InferReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InferReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reef.rpc.InferReply";
  }
  protected:
  explicit InferReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccFieldNumber = 1,
    kTidFieldNumber = 2,
  };
  // bool succ = 1;
  void clear_succ();
  bool succ() const;
  void set_succ(bool value);
  private:
  bool _internal_succ() const;
  void _internal_set_succ(bool value);
  public:

  // int32 tid = 2;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tid() const;
  void _internal_set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:reef.rpc.InferReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool succ_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reef_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadModelRequest

// string dir = 1;
inline void LoadModelRequest::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& LoadModelRequest::dir() const {
  // @@protoc_insertion_point(field_get:reef.rpc.LoadModelRequest.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadModelRequest::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reef.rpc.LoadModelRequest.dir)
}
inline std::string* LoadModelRequest::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:reef.rpc.LoadModelRequest.dir)
  return _s;
}
inline const std::string& LoadModelRequest::_internal_dir() const {
  return dir_.Get();
}
inline void LoadModelRequest::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadModelRequest::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadModelRequest::release_dir() {
  // @@protoc_insertion_point(field_release:reef.rpc.LoadModelRequest.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoadModelRequest::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:reef.rpc.LoadModelRequest.dir)
}

// string name = 2;
inline void LoadModelRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LoadModelRequest::name() const {
  // @@protoc_insertion_point(field_get:reef.rpc.LoadModelRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadModelRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reef.rpc.LoadModelRequest.name)
}
inline std::string* LoadModelRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:reef.rpc.LoadModelRequest.name)
  return _s;
}
inline const std::string& LoadModelRequest::_internal_name() const {
  return name_.Get();
}
inline void LoadModelRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadModelRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadModelRequest::release_name() {
  // @@protoc_insertion_point(field_release:reef.rpc.LoadModelRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoadModelRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:reef.rpc.LoadModelRequest.name)
}

// int32 qid = 3;
inline void LoadModelRequest::clear_qid() {
  qid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelRequest::_internal_qid() const {
  return qid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelRequest::qid() const {
  // @@protoc_insertion_point(field_get:reef.rpc.LoadModelRequest.qid)
  return _internal_qid();
}
inline void LoadModelRequest::_internal_set_qid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  qid_ = value;
}
inline void LoadModelRequest::set_qid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qid(value);
  // @@protoc_insertion_point(field_set:reef.rpc.LoadModelRequest.qid)
}

// -------------------------------------------------------------------

// LoadModelReply

// bool succ = 1;
inline void LoadModelReply::clear_succ() {
  succ_ = false;
}
inline bool LoadModelReply::_internal_succ() const {
  return succ_;
}
inline bool LoadModelReply::succ() const {
  // @@protoc_insertion_point(field_get:reef.rpc.LoadModelReply.succ)
  return _internal_succ();
}
inline void LoadModelReply::_internal_set_succ(bool value) {
  
  succ_ = value;
}
inline void LoadModelReply::set_succ(bool value) {
  _internal_set_succ(value);
  // @@protoc_insertion_point(field_set:reef.rpc.LoadModelReply.succ)
}

// int32 mid = 2;
inline void LoadModelReply::clear_mid() {
  mid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelReply::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelReply::mid() const {
  // @@protoc_insertion_point(field_get:reef.rpc.LoadModelReply.mid)
  return _internal_mid();
}
inline void LoadModelReply::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mid_ = value;
}
inline void LoadModelReply::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:reef.rpc.LoadModelReply.mid)
}

// -------------------------------------------------------------------

// SetPriorityRequest

// bool rt = 1;
inline void SetPriorityRequest::clear_rt() {
  rt_ = false;
}
inline bool SetPriorityRequest::_internal_rt() const {
  return rt_;
}
inline bool SetPriorityRequest::rt() const {
  // @@protoc_insertion_point(field_get:reef.rpc.SetPriorityRequest.rt)
  return _internal_rt();
}
inline void SetPriorityRequest::_internal_set_rt(bool value) {
  
  rt_ = value;
}
inline void SetPriorityRequest::set_rt(bool value) {
  _internal_set_rt(value);
  // @@protoc_insertion_point(field_set:reef.rpc.SetPriorityRequest.rt)
}

// -------------------------------------------------------------------

// SetPriorityReply

// bool succ = 1;
inline void SetPriorityReply::clear_succ() {
  succ_ = false;
}
inline bool SetPriorityReply::_internal_succ() const {
  return succ_;
}
inline bool SetPriorityReply::succ() const {
  // @@protoc_insertion_point(field_get:reef.rpc.SetPriorityReply.succ)
  return _internal_succ();
}
inline void SetPriorityReply::_internal_set_succ(bool value) {
  
  succ_ = value;
}
inline void SetPriorityReply::set_succ(bool value) {
  _internal_set_succ(value);
  // @@protoc_insertion_point(field_set:reef.rpc.SetPriorityReply.succ)
}

// int32 qid = 2;
inline void SetPriorityReply::clear_qid() {
  qid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPriorityReply::_internal_qid() const {
  return qid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPriorityReply::qid() const {
  // @@protoc_insertion_point(field_get:reef.rpc.SetPriorityReply.qid)
  return _internal_qid();
}
inline void SetPriorityReply::_internal_set_qid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  qid_ = value;
}
inline void SetPriorityReply::set_qid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qid(value);
  // @@protoc_insertion_point(field_set:reef.rpc.SetPriorityReply.qid)
}

// -------------------------------------------------------------------

// RegisterBlobRequest

// int32 mid = 1;
inline void RegisterBlobRequest::clear_mid() {
  mid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterBlobRequest::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterBlobRequest::mid() const {
  // @@protoc_insertion_point(field_get:reef.rpc.RegisterBlobRequest.mid)
  return _internal_mid();
}
inline void RegisterBlobRequest::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mid_ = value;
}
inline void RegisterBlobRequest::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:reef.rpc.RegisterBlobRequest.mid)
}

// string name = 2;
inline void RegisterBlobRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RegisterBlobRequest::name() const {
  // @@protoc_insertion_point(field_get:reef.rpc.RegisterBlobRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterBlobRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reef.rpc.RegisterBlobRequest.name)
}
inline std::string* RegisterBlobRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:reef.rpc.RegisterBlobRequest.name)
  return _s;
}
inline const std::string& RegisterBlobRequest::_internal_name() const {
  return name_.Get();
}
inline void RegisterBlobRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterBlobRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterBlobRequest::release_name() {
  // @@protoc_insertion_point(field_release:reef.rpc.RegisterBlobRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterBlobRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:reef.rpc.RegisterBlobRequest.name)
}

// -------------------------------------------------------------------

// RegisterBlobReply

// bool succ = 1;
inline void RegisterBlobReply::clear_succ() {
  succ_ = false;
}
inline bool RegisterBlobReply::_internal_succ() const {
  return succ_;
}
inline bool RegisterBlobReply::succ() const {
  // @@protoc_insertion_point(field_get:reef.rpc.RegisterBlobReply.succ)
  return _internal_succ();
}
inline void RegisterBlobReply::_internal_set_succ(bool value) {
  
  succ_ = value;
}
inline void RegisterBlobReply::set_succ(bool value) {
  _internal_set_succ(value);
  // @@protoc_insertion_point(field_set:reef.rpc.RegisterBlobReply.succ)
}

// string key = 2;
inline void RegisterBlobReply::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& RegisterBlobReply::key() const {
  // @@protoc_insertion_point(field_get:reef.rpc.RegisterBlobReply.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterBlobReply::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reef.rpc.RegisterBlobReply.key)
}
inline std::string* RegisterBlobReply::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:reef.rpc.RegisterBlobReply.key)
  return _s;
}
inline const std::string& RegisterBlobReply::_internal_key() const {
  return key_.Get();
}
inline void RegisterBlobReply::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterBlobReply::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterBlobReply::release_key() {
  // @@protoc_insertion_point(field_release:reef.rpc.RegisterBlobReply.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterBlobReply::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:reef.rpc.RegisterBlobReply.key)
}

// int64 size = 3;
inline void RegisterBlobReply::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterBlobReply::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterBlobReply::size() const {
  // @@protoc_insertion_point(field_get:reef.rpc.RegisterBlobReply.size)
  return _internal_size();
}
inline void RegisterBlobReply::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void RegisterBlobReply::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:reef.rpc.RegisterBlobReply.size)
}

// -------------------------------------------------------------------

// GetBlobRequest

// string key = 1;
inline void GetBlobRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& GetBlobRequest::key() const {
  // @@protoc_insertion_point(field_get:reef.rpc.GetBlobRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlobRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reef.rpc.GetBlobRequest.key)
}
inline std::string* GetBlobRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:reef.rpc.GetBlobRequest.key)
  return _s;
}
inline const std::string& GetBlobRequest::_internal_key() const {
  return key_.Get();
}
inline void GetBlobRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlobRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlobRequest::release_key() {
  // @@protoc_insertion_point(field_release:reef.rpc.GetBlobRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlobRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:reef.rpc.GetBlobRequest.key)
}

// -------------------------------------------------------------------

// GetBlobReply

// bool succ = 1;
inline void GetBlobReply::clear_succ() {
  succ_ = false;
}
inline bool GetBlobReply::_internal_succ() const {
  return succ_;
}
inline bool GetBlobReply::succ() const {
  // @@protoc_insertion_point(field_get:reef.rpc.GetBlobReply.succ)
  return _internal_succ();
}
inline void GetBlobReply::_internal_set_succ(bool value) {
  
  succ_ = value;
}
inline void GetBlobReply::set_succ(bool value) {
  _internal_set_succ(value);
  // @@protoc_insertion_point(field_set:reef.rpc.GetBlobReply.succ)
}

// -------------------------------------------------------------------

// SetBlobRequest

// string key = 1;
inline void SetBlobRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& SetBlobRequest::key() const {
  // @@protoc_insertion_point(field_get:reef.rpc.SetBlobRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetBlobRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reef.rpc.SetBlobRequest.key)
}
inline std::string* SetBlobRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:reef.rpc.SetBlobRequest.key)
  return _s;
}
inline const std::string& SetBlobRequest::_internal_key() const {
  return key_.Get();
}
inline void SetBlobRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetBlobRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetBlobRequest::release_key() {
  // @@protoc_insertion_point(field_release:reef.rpc.SetBlobRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetBlobRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:reef.rpc.SetBlobRequest.key)
}

// -------------------------------------------------------------------

// SetBlobReply

// bool succ = 1;
inline void SetBlobReply::clear_succ() {
  succ_ = false;
}
inline bool SetBlobReply::_internal_succ() const {
  return succ_;
}
inline bool SetBlobReply::succ() const {
  // @@protoc_insertion_point(field_get:reef.rpc.SetBlobReply.succ)
  return _internal_succ();
}
inline void SetBlobReply::_internal_set_succ(bool value) {
  
  succ_ = value;
}
inline void SetBlobReply::set_succ(bool value) {
  _internal_set_succ(value);
  // @@protoc_insertion_point(field_set:reef.rpc.SetBlobReply.succ)
}

// -------------------------------------------------------------------

// InferRequest

// int32 mid = 1;
inline void InferRequest::clear_mid() {
  mid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InferRequest::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InferRequest::mid() const {
  // @@protoc_insertion_point(field_get:reef.rpc.InferRequest.mid)
  return _internal_mid();
}
inline void InferRequest::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mid_ = value;
}
inline void InferRequest::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:reef.rpc.InferRequest.mid)
}

// bool async = 2;
inline void InferRequest::clear_async() {
  async_ = false;
}
inline bool InferRequest::_internal_async() const {
  return async_;
}
inline bool InferRequest::async() const {
  // @@protoc_insertion_point(field_get:reef.rpc.InferRequest.async)
  return _internal_async();
}
inline void InferRequest::_internal_set_async(bool value) {
  
  async_ = value;
}
inline void InferRequest::set_async(bool value) {
  _internal_set_async(value);
  // @@protoc_insertion_point(field_set:reef.rpc.InferRequest.async)
}

// -------------------------------------------------------------------

// InferReply

// bool succ = 1;
inline void InferReply::clear_succ() {
  succ_ = false;
}
inline bool InferReply::_internal_succ() const {
  return succ_;
}
inline bool InferReply::succ() const {
  // @@protoc_insertion_point(field_get:reef.rpc.InferReply.succ)
  return _internal_succ();
}
inline void InferReply::_internal_set_succ(bool value) {
  
  succ_ = value;
}
inline void InferReply::set_succ(bool value) {
  _internal_set_succ(value);
  // @@protoc_insertion_point(field_set:reef.rpc.InferReply.succ)
}

// int32 tid = 2;
inline void InferReply::clear_tid() {
  tid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InferReply::_internal_tid() const {
  return tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InferReply::tid() const {
  // @@protoc_insertion_point(field_get:reef.rpc.InferReply.tid)
  return _internal_tid();
}
inline void InferReply::_internal_set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tid_ = value;
}
inline void InferReply::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:reef.rpc.InferReply.tid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace reef

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_reef_2eproto

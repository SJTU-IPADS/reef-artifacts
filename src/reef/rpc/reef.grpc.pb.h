// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: reef.proto
#ifndef GRPC_reef_2eproto__INCLUDED
#define GRPC_reef_2eproto__INCLUDED

#include "reef.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace reef {
namespace rpc {

class REEFService final {
 public:
  static constexpr char const* service_full_name() {
    return "reef.rpc.REEFService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // load a DNN model
    virtual ::grpc::Status LoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::reef::rpc::LoadModelReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::LoadModelReply>> AsyncLoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::LoadModelReply>>(AsyncLoadModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::LoadModelReply>> PrepareAsyncLoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::LoadModelReply>>(PrepareAsyncLoadModelRaw(context, request, cq));
    }
    // create a Task queue
    virtual ::grpc::Status SetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::reef::rpc::SetPriorityReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetPriorityReply>> AsyncSetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetPriorityReply>>(AsyncSetPriorityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetPriorityReply>> PrepareAsyncSetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetPriorityReply>>(PrepareAsyncSetPriorityRaw(context, request, cq));
    }
    // register shared memory
    virtual ::grpc::Status RegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::reef::rpc::RegisterBlobReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::RegisterBlobReply>> AsyncRegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::RegisterBlobReply>>(AsyncRegisterBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::RegisterBlobReply>> PrepareAsyncRegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::RegisterBlobReply>>(PrepareAsyncRegisterBlobRaw(context, request, cq));
    }
    // memcpy device to host
    virtual ::grpc::Status GetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::reef::rpc::GetBlobReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::GetBlobReply>> AsyncGetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::GetBlobReply>>(AsyncGetBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::GetBlobReply>> PrepareAsyncGetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::GetBlobReply>>(PrepareAsyncGetBlobRaw(context, request, cq));
    }
    // memcpy host to device
    virtual ::grpc::Status SetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::reef::rpc::SetBlobReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetBlobReply>> AsyncSetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetBlobReply>>(AsyncSetBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetBlobReply>> PrepareAsyncSetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetBlobReply>>(PrepareAsyncSetBlobRaw(context, request, cq));
    }
    // create an inference task
    virtual ::grpc::Status Infer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::reef::rpc::InferReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::InferReply>> AsyncInfer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::InferReply>>(AsyncInferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::InferReply>> PrepareAsyncInfer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::InferReply>>(PrepareAsyncInferRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // load a DNN model
      virtual void LoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest* request, ::reef::rpc::LoadModelReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest* request, ::reef::rpc::LoadModelReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // create a Task queue
      virtual void SetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest* request, ::reef::rpc::SetPriorityReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest* request, ::reef::rpc::SetPriorityReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // register shared memory
      virtual void RegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest* request, ::reef::rpc::RegisterBlobReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest* request, ::reef::rpc::RegisterBlobReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // memcpy device to host
      virtual void GetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest* request, ::reef::rpc::GetBlobReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest* request, ::reef::rpc::GetBlobReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // memcpy host to device
      virtual void SetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest* request, ::reef::rpc::SetBlobReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest* request, ::reef::rpc::SetBlobReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // create an inference task
      virtual void Infer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest* request, ::reef::rpc::InferReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Infer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest* request, ::reef::rpc::InferReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::LoadModelReply>* AsyncLoadModelRaw(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::LoadModelReply>* PrepareAsyncLoadModelRaw(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetPriorityReply>* AsyncSetPriorityRaw(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetPriorityReply>* PrepareAsyncSetPriorityRaw(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::RegisterBlobReply>* AsyncRegisterBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::RegisterBlobReply>* PrepareAsyncRegisterBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::GetBlobReply>* AsyncGetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::GetBlobReply>* PrepareAsyncGetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetBlobReply>* AsyncSetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::SetBlobReply>* PrepareAsyncSetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::InferReply>* AsyncInferRaw(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reef::rpc::InferReply>* PrepareAsyncInferRaw(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status LoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::reef::rpc::LoadModelReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::LoadModelReply>> AsyncLoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::LoadModelReply>>(AsyncLoadModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::LoadModelReply>> PrepareAsyncLoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::LoadModelReply>>(PrepareAsyncLoadModelRaw(context, request, cq));
    }
    ::grpc::Status SetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::reef::rpc::SetPriorityReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetPriorityReply>> AsyncSetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetPriorityReply>>(AsyncSetPriorityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetPriorityReply>> PrepareAsyncSetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetPriorityReply>>(PrepareAsyncSetPriorityRaw(context, request, cq));
    }
    ::grpc::Status RegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::reef::rpc::RegisterBlobReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::RegisterBlobReply>> AsyncRegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::RegisterBlobReply>>(AsyncRegisterBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::RegisterBlobReply>> PrepareAsyncRegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::RegisterBlobReply>>(PrepareAsyncRegisterBlobRaw(context, request, cq));
    }
    ::grpc::Status GetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::reef::rpc::GetBlobReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::GetBlobReply>> AsyncGetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::GetBlobReply>>(AsyncGetBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::GetBlobReply>> PrepareAsyncGetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::GetBlobReply>>(PrepareAsyncGetBlobRaw(context, request, cq));
    }
    ::grpc::Status SetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::reef::rpc::SetBlobReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetBlobReply>> AsyncSetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetBlobReply>>(AsyncSetBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetBlobReply>> PrepareAsyncSetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetBlobReply>>(PrepareAsyncSetBlobRaw(context, request, cq));
    }
    ::grpc::Status Infer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::reef::rpc::InferReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::InferReply>> AsyncInfer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::InferReply>>(AsyncInferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::InferReply>> PrepareAsyncInfer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reef::rpc::InferReply>>(PrepareAsyncInferRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void LoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest* request, ::reef::rpc::LoadModelReply* response, std::function<void(::grpc::Status)>) override;
      void LoadModel(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest* request, ::reef::rpc::LoadModelReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest* request, ::reef::rpc::SetPriorityReply* response, std::function<void(::grpc::Status)>) override;
      void SetPriority(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest* request, ::reef::rpc::SetPriorityReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest* request, ::reef::rpc::RegisterBlobReply* response, std::function<void(::grpc::Status)>) override;
      void RegisterBlob(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest* request, ::reef::rpc::RegisterBlobReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest* request, ::reef::rpc::GetBlobReply* response, std::function<void(::grpc::Status)>) override;
      void GetBlob(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest* request, ::reef::rpc::GetBlobReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest* request, ::reef::rpc::SetBlobReply* response, std::function<void(::grpc::Status)>) override;
      void SetBlob(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest* request, ::reef::rpc::SetBlobReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Infer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest* request, ::reef::rpc::InferReply* response, std::function<void(::grpc::Status)>) override;
      void Infer(::grpc::ClientContext* context, const ::reef::rpc::InferRequest* request, ::reef::rpc::InferReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::LoadModelReply>* AsyncLoadModelRaw(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::LoadModelReply>* PrepareAsyncLoadModelRaw(::grpc::ClientContext* context, const ::reef::rpc::LoadModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetPriorityReply>* AsyncSetPriorityRaw(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetPriorityReply>* PrepareAsyncSetPriorityRaw(::grpc::ClientContext* context, const ::reef::rpc::SetPriorityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::RegisterBlobReply>* AsyncRegisterBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::RegisterBlobReply>* PrepareAsyncRegisterBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::RegisterBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::GetBlobReply>* AsyncGetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::GetBlobReply>* PrepareAsyncGetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::GetBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetBlobReply>* AsyncSetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::SetBlobReply>* PrepareAsyncSetBlobRaw(::grpc::ClientContext* context, const ::reef::rpc::SetBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::InferReply>* AsyncInferRaw(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reef::rpc::InferReply>* PrepareAsyncInferRaw(::grpc::ClientContext* context, const ::reef::rpc::InferRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LoadModel_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPriority_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterBlob_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlob_;
    const ::grpc::internal::RpcMethod rpcmethod_SetBlob_;
    const ::grpc::internal::RpcMethod rpcmethod_Infer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // load a DNN model
    virtual ::grpc::Status LoadModel(::grpc::ServerContext* context, const ::reef::rpc::LoadModelRequest* request, ::reef::rpc::LoadModelReply* response);
    // create a Task queue
    virtual ::grpc::Status SetPriority(::grpc::ServerContext* context, const ::reef::rpc::SetPriorityRequest* request, ::reef::rpc::SetPriorityReply* response);
    // register shared memory
    virtual ::grpc::Status RegisterBlob(::grpc::ServerContext* context, const ::reef::rpc::RegisterBlobRequest* request, ::reef::rpc::RegisterBlobReply* response);
    // memcpy device to host
    virtual ::grpc::Status GetBlob(::grpc::ServerContext* context, const ::reef::rpc::GetBlobRequest* request, ::reef::rpc::GetBlobReply* response);
    // memcpy host to device
    virtual ::grpc::Status SetBlob(::grpc::ServerContext* context, const ::reef::rpc::SetBlobRequest* request, ::reef::rpc::SetBlobReply* response);
    // create an inference task
    virtual ::grpc::Status Infer(::grpc::ServerContext* context, const ::reef::rpc::InferRequest* request, ::reef::rpc::InferReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadModel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* /*context*/, const ::reef::rpc::LoadModelRequest* /*request*/, ::reef::rpc::LoadModelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadModel(::grpc::ServerContext* context, ::reef::rpc::LoadModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::reef::rpc::LoadModelReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPriority() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetPriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPriority(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetPriorityRequest* /*request*/, ::reef::rpc::SetPriorityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPriority(::grpc::ServerContext* context, ::reef::rpc::SetPriorityRequest* request, ::grpc::ServerAsyncResponseWriter< ::reef::rpc::SetPriorityReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterBlob() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RegisterBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::RegisterBlobRequest* /*request*/, ::reef::rpc::RegisterBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterBlob(::grpc::ServerContext* context, ::reef::rpc::RegisterBlobRequest* request, ::grpc::ServerAsyncResponseWriter< ::reef::rpc::RegisterBlobReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlob() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::GetBlobRequest* /*request*/, ::reef::rpc::GetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlob(::grpc::ServerContext* context, ::reef::rpc::GetBlobRequest* request, ::grpc::ServerAsyncResponseWriter< ::reef::rpc::GetBlobReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetBlob() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetBlobRequest* /*request*/, ::reef::rpc::SetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBlob(::grpc::ServerContext* context, ::reef::rpc::SetBlobRequest* request, ::grpc::ServerAsyncResponseWriter< ::reef::rpc::SetBlobReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Infer() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::reef::rpc::InferRequest* /*request*/, ::reef::rpc::InferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfer(::grpc::ServerContext* context, ::reef::rpc::InferRequest* request, ::grpc::ServerAsyncResponseWriter< ::reef::rpc::InferReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LoadModel<WithAsyncMethod_SetPriority<WithAsyncMethod_RegisterBlob<WithAsyncMethod_GetBlob<WithAsyncMethod_SetBlob<WithAsyncMethod_Infer<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadModel() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::reef::rpc::LoadModelRequest, ::reef::rpc::LoadModelReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::reef::rpc::LoadModelRequest* request, ::reef::rpc::LoadModelReply* response) { return this->LoadModel(context, request, response); }));}
    void SetMessageAllocatorFor_LoadModel(
        ::grpc::MessageAllocator< ::reef::rpc::LoadModelRequest, ::reef::rpc::LoadModelReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::reef::rpc::LoadModelRequest, ::reef::rpc::LoadModelReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* /*context*/, const ::reef::rpc::LoadModelRequest* /*request*/, ::reef::rpc::LoadModelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadModel(
      ::grpc::CallbackServerContext* /*context*/, const ::reef::rpc::LoadModelRequest* /*request*/, ::reef::rpc::LoadModelReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPriority() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::reef::rpc::SetPriorityRequest, ::reef::rpc::SetPriorityReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::reef::rpc::SetPriorityRequest* request, ::reef::rpc::SetPriorityReply* response) { return this->SetPriority(context, request, response); }));}
    void SetMessageAllocatorFor_SetPriority(
        ::grpc::MessageAllocator< ::reef::rpc::SetPriorityRequest, ::reef::rpc::SetPriorityReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::reef::rpc::SetPriorityRequest, ::reef::rpc::SetPriorityReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPriority(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetPriorityRequest* /*request*/, ::reef::rpc::SetPriorityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPriority(
      ::grpc::CallbackServerContext* /*context*/, const ::reef::rpc::SetPriorityRequest* /*request*/, ::reef::rpc::SetPriorityReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterBlob() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::reef::rpc::RegisterBlobRequest, ::reef::rpc::RegisterBlobReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::reef::rpc::RegisterBlobRequest* request, ::reef::rpc::RegisterBlobReply* response) { return this->RegisterBlob(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterBlob(
        ::grpc::MessageAllocator< ::reef::rpc::RegisterBlobRequest, ::reef::rpc::RegisterBlobReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::reef::rpc::RegisterBlobRequest, ::reef::rpc::RegisterBlobReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::RegisterBlobRequest* /*request*/, ::reef::rpc::RegisterBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::reef::rpc::RegisterBlobRequest* /*request*/, ::reef::rpc::RegisterBlobReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlob() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::reef::rpc::GetBlobRequest, ::reef::rpc::GetBlobReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::reef::rpc::GetBlobRequest* request, ::reef::rpc::GetBlobReply* response) { return this->GetBlob(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlob(
        ::grpc::MessageAllocator< ::reef::rpc::GetBlobRequest, ::reef::rpc::GetBlobReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::reef::rpc::GetBlobRequest, ::reef::rpc::GetBlobReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::GetBlobRequest* /*request*/, ::reef::rpc::GetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::reef::rpc::GetBlobRequest* /*request*/, ::reef::rpc::GetBlobReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetBlob() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::reef::rpc::SetBlobRequest, ::reef::rpc::SetBlobReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::reef::rpc::SetBlobRequest* request, ::reef::rpc::SetBlobReply* response) { return this->SetBlob(context, request, response); }));}
    void SetMessageAllocatorFor_SetBlob(
        ::grpc::MessageAllocator< ::reef::rpc::SetBlobRequest, ::reef::rpc::SetBlobReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::reef::rpc::SetBlobRequest, ::reef::rpc::SetBlobReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetBlobRequest* /*request*/, ::reef::rpc::SetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::reef::rpc::SetBlobRequest* /*request*/, ::reef::rpc::SetBlobReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Infer() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::reef::rpc::InferRequest, ::reef::rpc::InferReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::reef::rpc::InferRequest* request, ::reef::rpc::InferReply* response) { return this->Infer(context, request, response); }));}
    void SetMessageAllocatorFor_Infer(
        ::grpc::MessageAllocator< ::reef::rpc::InferRequest, ::reef::rpc::InferReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::reef::rpc::InferRequest, ::reef::rpc::InferReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::reef::rpc::InferRequest* /*request*/, ::reef::rpc::InferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Infer(
      ::grpc::CallbackServerContext* /*context*/, const ::reef::rpc::InferRequest* /*request*/, ::reef::rpc::InferReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_LoadModel<WithCallbackMethod_SetPriority<WithCallbackMethod_RegisterBlob<WithCallbackMethod_GetBlob<WithCallbackMethod_SetBlob<WithCallbackMethod_Infer<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadModel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* /*context*/, const ::reef::rpc::LoadModelRequest* /*request*/, ::reef::rpc::LoadModelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPriority() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetPriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPriority(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetPriorityRequest* /*request*/, ::reef::rpc::SetPriorityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterBlob() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RegisterBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::RegisterBlobRequest* /*request*/, ::reef::rpc::RegisterBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlob() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::GetBlobRequest* /*request*/, ::reef::rpc::GetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetBlob() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetBlobRequest* /*request*/, ::reef::rpc::SetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Infer() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::reef::rpc::InferRequest* /*request*/, ::reef::rpc::InferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadModel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* /*context*/, const ::reef::rpc::LoadModelRequest* /*request*/, ::reef::rpc::LoadModelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPriority() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetPriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPriority(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetPriorityRequest* /*request*/, ::reef::rpc::SetPriorityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPriority(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterBlob() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RegisterBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::RegisterBlobRequest* /*request*/, ::reef::rpc::RegisterBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterBlob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlob() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::GetBlobRequest* /*request*/, ::reef::rpc::GetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetBlob() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetBlobRequest* /*request*/, ::reef::rpc::SetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBlob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Infer() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::reef::rpc::InferRequest* /*request*/, ::reef::rpc::InferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadModel() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* /*context*/, const ::reef::rpc::LoadModelRequest* /*request*/, ::reef::rpc::LoadModelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPriority() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPriority(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPriority(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetPriorityRequest* /*request*/, ::reef::rpc::SetPriorityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPriority(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterBlob() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterBlob(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::RegisterBlobRequest* /*request*/, ::reef::rpc::RegisterBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlob() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlob(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::GetBlobRequest* /*request*/, ::reef::rpc::GetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetBlob() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetBlob(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetBlobRequest* /*request*/, ::reef::rpc::SetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Infer() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Infer(context, request, response); }));
    }
    ~WithRawCallbackMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::reef::rpc::InferRequest* /*request*/, ::reef::rpc::InferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Infer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadModel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reef::rpc::LoadModelRequest, ::reef::rpc::LoadModelReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::reef::rpc::LoadModelRequest, ::reef::rpc::LoadModelReply>* streamer) {
                       return this->StreamedLoadModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* /*context*/, const ::reef::rpc::LoadModelRequest* /*request*/, ::reef::rpc::LoadModelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reef::rpc::LoadModelRequest,::reef::rpc::LoadModelReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPriority() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reef::rpc::SetPriorityRequest, ::reef::rpc::SetPriorityReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::reef::rpc::SetPriorityRequest, ::reef::rpc::SetPriorityReply>* streamer) {
                       return this->StreamedSetPriority(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPriority(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetPriorityRequest* /*request*/, ::reef::rpc::SetPriorityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPriority(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reef::rpc::SetPriorityRequest,::reef::rpc::SetPriorityReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterBlob() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reef::rpc::RegisterBlobRequest, ::reef::rpc::RegisterBlobReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::reef::rpc::RegisterBlobRequest, ::reef::rpc::RegisterBlobReply>* streamer) {
                       return this->StreamedRegisterBlob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::RegisterBlobRequest* /*request*/, ::reef::rpc::RegisterBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterBlob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reef::rpc::RegisterBlobRequest,::reef::rpc::RegisterBlobReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlob() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reef::rpc::GetBlobRequest, ::reef::rpc::GetBlobReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::reef::rpc::GetBlobRequest, ::reef::rpc::GetBlobReply>* streamer) {
                       return this->StreamedGetBlob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::GetBlobRequest* /*request*/, ::reef::rpc::GetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reef::rpc::GetBlobRequest,::reef::rpc::GetBlobReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetBlob() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reef::rpc::SetBlobRequest, ::reef::rpc::SetBlobReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::reef::rpc::SetBlobRequest, ::reef::rpc::SetBlobReply>* streamer) {
                       return this->StreamedSetBlob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetBlob(::grpc::ServerContext* /*context*/, const ::reef::rpc::SetBlobRequest* /*request*/, ::reef::rpc::SetBlobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetBlob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reef::rpc::SetBlobRequest,::reef::rpc::SetBlobReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Infer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Infer() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reef::rpc::InferRequest, ::reef::rpc::InferReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::reef::rpc::InferRequest, ::reef::rpc::InferReply>* streamer) {
                       return this->StreamedInfer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Infer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Infer(::grpc::ServerContext* /*context*/, const ::reef::rpc::InferRequest* /*request*/, ::reef::rpc::InferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInfer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reef::rpc::InferRequest,::reef::rpc::InferReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_LoadModel<WithStreamedUnaryMethod_SetPriority<WithStreamedUnaryMethod_RegisterBlob<WithStreamedUnaryMethod_GetBlob<WithStreamedUnaryMethod_SetBlob<WithStreamedUnaryMethod_Infer<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_LoadModel<WithStreamedUnaryMethod_SetPriority<WithStreamedUnaryMethod_RegisterBlob<WithStreamedUnaryMethod_GetBlob<WithStreamedUnaryMethod_SetBlob<WithStreamedUnaryMethod_Infer<Service > > > > > > StreamedService;
};

}  // namespace rpc
}  // namespace reef


#endif  // GRPC_reef_2eproto__INCLUDED
